/// ///////////////////////////////// AFRAME

// // Copyright (c) 2019 8th Wall, Inc.
// //
// // app.js is the main entry point for your 8th Wall app. Code here will execute after head.html
// // is loaded, and before body.html is loaded.

// import curvedMeshComponent from './extras/curved-mesh'
// import overrideImageTargetsComponent from './extras/override-image-targets'

// AFRAME.registerComponent('xrextras-curved-mesh', curvedMeshComponent)
// AFRAME.registerComponent('xrextras-override-image-targets', overrideImageTargetsComponent)

// AFRAME.registerState({
//   initialState: {
//     targetName: 'amity_rot_side',
//     targetGeometry: 'full',
//   },
// })
// //////////////////////////////////// THREE.JS

// Copyright (c) 2020 8th Wall, Inc.
//
// app.js is the main entry point for your 8th Wall app. Code here will execute after head.html
// is loaded, and before body.html is loaded.

import {imageTargetPipelineModule} from './imagetarget'
import {cylinderExamples} from './cylinder-examples.js'
import {imageFramePipelineModule} from './imageframe.js'

import './index.css'
import * as camerafeedHtml from './camerafeed.html'

// console.log('[INIT] window.innerWidth ', window.innerWidth, ' window.innerHeight ', window.innerHeight, ' document.documentElement.clientWidth ', document.documentElement.clientWidth, ' document.documentElement.clientHeight ', document.documentElement.clientHeight, 'document.body.clientWidth', document.body.clientWidth, 'document.body.clientHeight', document.body.clientHeight, ' window.devicePixelRatio ', window.devicePixelRatio)

// window.addEventListener('xrloaded', (event) => {
//   const c = document.getElementsByTagName('canvas').item(0)
//   console.log('[xrloaded] window.innerWidth ', window.innerWidth, ' wnidow.innerHeight ', window.innerHeight, ' document.documentElement.clientWidth ', document.documentElement.clientWidth, ' document.documentElement.clientHeight ', document.documentElement.clientHeight, 'document.body.clientWidth', document.body.clientWidth, 'document.body.clientHeight', document.body.clientHeight, ' window.devicePixelRatio ', window.devicePixelRatio)
//   console.log('[xrloaded] canvas.clientWidth:', c.clientWidth, ' canvas.clientHeight: ', c.clientHeight, ' canvas.width: ', c.width, ' canvas.height: ', c.height)

// })

// window.addEventListener('click', (event) => {
//   const c = document.getElementsByTagName('canvas').item(0)
//   console.log('[click] window.innerWidth ', window.innerWidth, ' window.innerHeight ', window.innerHeight, ' document.documentElement.clientWidth ', document.documentElement.clientWidth, ' document.documentElement.clientHeight ', document.documentElement.clientHeight, 'document.body.clientWidth', document.body.clientWidth, 'document.body.clientHeight', document.body.clientHeight, ' window.devicePixelRatio ', window.devicePixelRatio)
//   console.log('[click] canvas.clientWidth:', c.clientWidth, ' canvas.clientHeight: ', c.clientHeight, ' canvas.width: ', c.width, ' canvas.height: ', c.height)
// })

const onxrloaded = () => {
  // XRExtras.MediaRecorder.initRecordButton()  // Adds record button
  // XRExtras.MediaRecorder.initMediaPreview()  // Adds media preview and share
  // XRExtras.MediaRecorder.configure({
  //   // watermarkImageUrl: require('./assets/Logos/8logo.png'), // Adds watermark to photo/video
  //   // watermarkMaxWidth: 100,
  //   // watermarkMaxHeight: 10,
  // })

  XR8.XrController.configure({disableWorldTracking: true, verbose: true})  // , imageTargets: ['tyrell', 'amity_target']}) //, imageTargets: ['blur-rotated'] })
  XR8.addCameraPipelineModules([  // Add camera pipeline modules.
    // Existing pipeline modules.
    XR8.GlTextureRenderer.pipelineModule(),      // Draws the camera feed.
    XR8.Threejs.pipelineModule(),                // Creates a ThreeJS AR Scene.
    XR8.XrController.pipelineModule(),           // Enables SLAM tracking.
    XRExtras.AlmostThere.pipelineModule(),       // Detects unsupported browsers and gives hints.
    XRExtras.FullWindowCanvas.pipelineModule(),  // Modifies the canvas to fill the window.
    XRExtras.Loading.pipelineModule(),           // Manages the loading screen on startup.
    XRExtras.RuntimeError.pipelineModule(),      // Shows an error image on runtime error.
    XRExtras.Stats.pipelineModule(),

    // XR8.MediaRecorder.pipelineModule(),
    XR8.CanvasScreenshot.pipelineModule(),
    // Custom pipeline modules.
    imageTargetPipelineModule(),  // Draws a frame around detected image targets.
    // cylinderExamples(),
    // imageFramePipelineModule(),  // Draws a frame around detected image targets.
  ])

  // Open the camera and start running the camera run loop.
  document.body.insertAdjacentHTML('beforeend', camerafeedHtml)

  XR8.run({
    canvas: document.getElementById('camerafeed'),
    verbose: true,
    cameraConfig: {direction: XR8.XrConfig.camera().BACK},
    allowedDevices: XR8.XrConfig.device().ANY,
  })
}

// Show loading screen before the full XR library has been loaded.
XRExtras.Loading.showLoading({onxrloaded})

/// ///////////////////////////////// AFRAME

// // Copyright (c) 2019 8th Wall, Inc.
// //
// // app.js is the main entry point for your 8th Wall app. Code here will execute after head.html
// // is loaded, and before body.html is loaded.

// import curvedMeshComponent from './extras/curved-mesh'
// import overrideImageTargetsComponent from './extras/override-image-targets'

// AFRAME.registerComponent('xrextras-curved-mesh', curvedMeshComponent)
// AFRAME.registerComponent('xrextras-override-image-targets', overrideImageTargetsComponent)

// AFRAME.registerState({
//   initialState: {
//     targetName: 'amity_rot_side',
//     targetGeometry: 'full',
//   },
// })
sdf
test
hello


// //////////////////////////////////// THREE.JS

// Copyright (c) 2020 8th Wall, Inc.
//
// app.js is the main entry point for your 8th Wall app. Code here will execute after head.html
// is loaded, and before body.html is loaded.

import {imageTargetPipelineModule} from './imagetarget'
import {cylinderExamples} from './cylinder-examples.js'
import {imageFramePipelineModule} from './imageframe.js'

import './index.css'
import * as camerafeedHtml from './camerafeed.html'

// console.log('[INIT] window.innerWidth ', window.innerWidth, ' window.innerHeight ', window.innerHeight, ' document.documentElement.clientWidth ', document.documentElement.clientWidth, ' document.documentElement.clientHeight ', document.documentElement.clientHeight, 'document.body.clientWidth', document.body.clientWidth, 'document.body.clientHeight', document.body.clientHeight, ' window.devicePixelRatio ', window.devicePixelRatio)

// window.addEventListener('xrloaded', (event) => {
//   const c = document.getElementsByTagName('canvas').item(0)
//   console.log('[xrloaded] window.innerWidth ', window.innerWidth, ' wnidow.innerHeight ', window.innerHeight, ' document.documentElement.clientWidth ', document.documentElement.clientWidth, ' document.documentElement.clientHeight ', document.documentElement.clientHeight, 'document.body.clientWidth', document.body.clientWidth, 'document.body.clientHeight', document.body.clientHeight, ' window.devicePixelRatio ', window.devicePixelRatio)
//   console.log('[xrloaded] canvas.clientWidth:', c.clientWidth, ' canvas.clientHeight: ', c.clientHeight, ' canvas.width: ', c.width, ' canvas.height: ', c.height)

// })

// window.addEventListener('click', (event) => {
//   const c = document.getElementsByTagName('canvas').item(0)
//   console.log('[click] window.innerWidth ', window.innerWidth, ' window.innerHeight ', window.innerHeight, ' document.documentElement.clientWidth ', document.documentElement.clientWidth, ' document.documentElement.clientHeight ', document.documentElement.clientHeight, 'document.body.clientWidth', document.body.clientWidth, 'document.body.clientHeight', document.body.clientHeight, ' window.devicePixelRatio ', window.devicePixelRatio)
//   console.log('[click] canvas.clientWidth:', c.clientWidth, ' canvas.clientHeight: ', c.clientHeight, ' canvas.width: ', c.width, ' canvas.height: ', c.height)
// })

const onxrloaded = () => {
  // XRExtras.MediaRecorder.initRecordButton()  // Adds record button
  // XRExtras.MediaRecorder.initMediaPreview()  // Adds media preview and share
  // XRExtras.MediaRecorder.configure({
  //   // watermarkImageUrl: require('./assets/Logos/8logo.png'), // Adds watermark to photo/video
  //   // watermarkMaxWidth: 100,
  //   // watermarkMaxHeight: 10,
  // })

  XR8.XrController.configure({disableWorldTracking: true, verbose: true})  // , imageTargets: ['tyrell', 'amity_target']}) //, imageTargets: ['blur-rotated'] })
  XR8.addCameraPipelineModules([  // Add camera pipeline modules.
    // Existing pipeline modules.
    XR8.GlTextureRenderer.pipelineModule(),      // Draws the camera feed.
    XR8.Threejs.pipelineModule(),                // Creates a ThreeJS AR Scene.
    XR8.XrController.pipelineModule(),           // Enables SLAM tracking.
    XRExtras.AlmostThere.pipelineModule(),       // Detects unsupported browsers and gives hints.
    XRExtras.FullWindowCanvas.pipelineModule(),  // Modifies the canvas to fill the window.
    XRExtras.Loading.pipelineModule(),           // Manages the loading screen on startup.
    XRExtras.RuntimeError.pipelineModule(),      // Shows an error image on runtime error.
    XRExtras.Stats.pipelineModule(),
    // XR8.MediaRecorder.pipelineModule(),
    XR8.CanvasScreenshot.pipelineModule(),
    // Custom pipeline modules.
    imageTargetPipelineModule(),  // Draws a frame around detected image targets.
    // cylinderExamples(),
    // imageFramePipelineModule(),  // Draws a frame around detected image targets.
  ])

  // Open the camera and start running the camera run loop.
  document.body.insertAdjacentHTML('beforeend', camerafeedHtml)

  XR8.run({
    canvas: document.getElementById('camerafeed'),
    verbose: true,
    cameraConfig: {direction: XR8.XrConfig.camera().BACK},
    allowedDevices: XR8.XrConfig.device().ANY,
  })
}

// Show loading screen before the full XR library has been loaded.
XRExtras.Loading.showLoading({onxrloaded})

// Copyright (c) 2018 8th Wall, Inc.
const imageFramePipelineModule = () => {
  const LIGHT_PURPLE = 0xAD50FF
  const CHERRY = 0xDD0065
  const MINT = 0x00EDAF
  const MANGO = 0xFFC828
  const GRAY = 0x8083A2
  const DARK_GRAY = 0x464766

  const allFrames = {}
  let scene

  // Renders one side of a picture frame rectangle.
  const frameEdge = (x, y, w1, h1, w2, h2) => {
    const edge = new THREE.Group()
    const big = new THREE.Mesh(new THREE.CubeGeometry(w1, h1, 0.008),
      new THREE.MeshBasicMaterial({color: DARK_GRAY}))
    big.position.set(x, y, 0)
    const small = new THREE.Mesh(new THREE.CubeGeometry(w2, h2, 0.012),
      new THREE.MeshBasicMaterial({color: GRAY}))
    small.position.set(x, y, 0)
    edge.add(big)
    edge.add(small)
    return edge
  }

  // Renders a picture frame rectangle.
  const frameBorder = (scaledWidth, scaledHeight) => {
    const border = new THREE.Group()
    border.add(frameEdge(-scaledWidth / 2, 0, 0.05, scaledHeight + 0.05, 0.03, scaledHeight + 0.03))
    border.add(frameEdge(scaledWidth / 2, 0, 0.05, scaledHeight + 0.05, 0.03, scaledHeight + 0.03))
    border.add(frameEdge(0, -scaledHeight / 2, scaledWidth + 0.05, 0.05, scaledWidth + 0.03, 0.03))
    border.add(frameEdge(0, scaledHeight / 2, scaledWidth + 0.05, 0.05, scaledWidth + 0.03, 0.03))
    return border
  }

  // Adds a tinted-glass effect.
  const framePane = (scaledWidth, scaledHeight) => {
    const material = new THREE.MeshBasicMaterial({color: LIGHT_PURPLE})
    material.alphaMap = new THREE.DataTexture(new Uint8Array([0, 127, 0]), 1, 1, THREE.RGBFormat)
    material.alphaMap.needsUpdate = true
    material.transparent = true
    return new THREE.Mesh(new THREE.CubeGeometry(scaledWidth, scaledHeight, 0.001), material)
  }

  // Adds an oriented axis.
  const axis = () => {
    const axes = new THREE.Group()
    const axisLength = 0.2
    const cylinder = new THREE.CylinderBufferGeometry(0.01, 0.01, axisLength, 32)
    const xAxis = new THREE.Mesh(cylinder, new THREE.MeshBasicMaterial({color: MANGO}))
    const yAxis = new THREE.Mesh(cylinder, new THREE.MeshBasicMaterial({color: CHERRY}))
    const zAxis = new THREE.Mesh(cylinder, new THREE.MeshBasicMaterial({color: MINT}))
    xAxis.rotateZ(Math.PI / 2)
    xAxis.position.set(axisLength / 2, 0, 0)
    yAxis.position.set(0, axisLength / 2, 0)
    zAxis.rotateX(Math.PI / 2)
    zAxis.position.set(0, 0, axisLength / 2)
    axes.add(xAxis)
    axes.add(yAxis)
    axes.add(zAxis)
    return axes
  }

  // Constructs a picture frame out of threejs primitives.
  const buildPrimitiveFrame = ({scaledWidth, scaledHeight}) => {
    const frame = new THREE.Group()
    frame.add(frameBorder(scaledWidth, scaledHeight))
    frame.add(framePane(scaledWidth, scaledHeight))
    frame.add(axis())
    scene.add(frame)
    return frame
  }
  
  const logEvent = ({name, detail}) => {
    // console.log(`Handling event ${name}, got detail, ${JSON.stringify(detail)}`)
  }

  // Updates the position of a picture frame that covers an image target.
  const showImageFrame = ({detail}) => {
    let frame = allFrames[detail.name]
    if (!frame) {
      frame = buildPrimitiveFrame(detail)
      allFrames[detail.name] = frame
    }
    frame.position.copy(detail.position)
    frame.quaternion.copy(detail.rotation)
    frame.scale.set(detail.scale, detail.scale, detail.scale)
    frame.visible = true
  }

  // Hides the image frame when the target is no longer detected.
  const hideImageFrame = ({detail}) => {
    allFrames[detail.name].visible = false
  }

  // Grab a handle to the threejs scene and set the camera position on pipeline startup.
  const onAttach = ({canvasWidth, canvasHeight}) => {
    // Get the 3js sceen from xr3js.
    const {camera} = XR8.Threejs.xrScene()
    scene = XR8.Threejs.xrScene().scene

    // Set the initial camera position relative to the scene we just laid out. This must be at a
    // height greater than y=0.
    camera.position.set(0, 3, 0)

    // Sync the xr controller's 6DoF position and camera paremeters with our scene.
    XR8.XrController.updateCameraProjectionMatrix({
      origin: camera.position,
      facing: camera.quaternion,
    })
  }

  return {
    // Camera pipeline modules need a name. It can be whatever you want but must be unique within
    // your app.
    name: 'targetframes',

    // onStart is called once when the camera feed begins. In this case, we need to wait for the
    // XR8.Threejs scene to be ready before we can access it to add content. It was created in
    // XR8.Threejs.pipelineModule()'s onStart method.
    // onStart,
    onAttach,

    // Listeners are called right after the processing stage that fired them. This guarantees that
    // updates can be applied at an appropriate synchronized point in the rendering cycle.
    listeners: [
      {event: 'reality.imagescanning', process: logEvent },
      {event: 'reality.imageloading', process: logEvent },
      {event: 'reality.imagefound', process: showImageFrame},
      {event: 'reality.imagefound', process: logEvent },
      {event: 'reality.imageupdated', process: showImageFrame},
      {event: 'reality.imageupdated', process: logEvent},
      {event: 'reality.imagelost', process: hideImageFrame},
      {event: 'reality.imagelost', process: logEvent},
      {event: 'reality.imageremoved', process: logEvent},
    
    ],
  }
}

export {imageFramePipelineModule}

const imageTargetPipelineModule = () => {
  const modelFile = require('./assets/jellyfish-model.glb')
  const modelFile2 = require('./assets/tree.glb')
  const videoFile = require('./assets/jellyfish-video.mp4')

  const loader = new THREE.GLTFLoader()  // This comes from GLTFLoader.js.
  const raycaster = new THREE.Raycaster()
  const tapPosition = new THREE.Vector2()

  let model2
  let model
  let video, videoObj

  // Populates some object into an XR scene and sets the initial camera position. The scene and
  // camera come from xr3js, and are only available in the camera loop lifecycle onStart() or later.
  const initXrScene = ({scene, camera}) => {
    console.log('initXrScene')

    // create the video element
    video = document.createElement('video')
    video.src = videoFile
    video.setAttribute('preload', 'auto')
    video.setAttribute('loop', '')
    video.setAttribute('muted', '')
    video.setAttribute('playsinline', '')
    video.setAttribute('webkit-playsinline', '')

    const texture = new THREE.VideoTexture(video)
    texture.minFilter = THREE.LinearFilter
    texture.magFilter = THREE.LinearFilter
    texture.format = THREE.RGBFormat
    texture.crossOrigin = 'anonymous'

    videoObj = new THREE.Mesh(
      new THREE.PlaneGeometry(0.75, 1),
      new THREE.MeshBasicMaterial({map: texture})
    )
    // Hide video until image target is detected.
    videoObj.visible = false
    scene.add(videoObj)
    video.load()

    // Load 3D model
    loader.load(
      // resource URL
      modelFile,
      // loaded handler
      (gltf) => {
        model = gltf.scene
        scene.add(model)
        // Hide 3D model until image target is detected.
        model.visible = false
      },
      // progress handler
      (xhr) => { console.log(`${(xhr.loaded / xhr.total * 100)}% loaded`) },
      // error handler
      (error) => {console.log('Error loading .glb model:', error)}
    )
    
    // Load 3D model
    loader.load(
      // resource URL
      modelFile2,
      // loaded handler
      (gltf) => {
        model2 = gltf.scene
        scene.add(model2)
        // Hide 3D model until image target is detected.
        model2.visible = false
      },
      // progress handler
      (xhr) => { console.log(`${(xhr.loaded / xhr.total * 100)}% loaded`) },
      // error handler
      (error) => {console.log('Error loading .glb model:', error)}
    )

    // Add soft white light to the scene.
    // This light cannot be used to cast shadows as it does not have a direction.
    scene.add(new THREE.AmbientLight(0x404040, 5))

    // Set the initial camera position relative to the scene we just laid out. This must be at a
    // height greater than y=0.
    camera.position.set(0, 3, 0)
  }

  // Places content over image target
  const showTarget = ({detail}) => {
    // When the image target named 'model-target' is detected, show 3D model.
    // This string must match the name of the image target uploaded to 8th Wall.
    
    console.log(detail)
    
    // When the image target named 'video-target' is detected, play video.
    // This string must match the name of the image target uploaded to 8th Wall.
    if (detail.name === 'video-target') {
      videoObj.position.copy(detail.position)
      videoObj.quaternion.copy(detail.rotation)
      videoObj.scale.set(detail.scale, detail.scale, detail.scale)
      videoObj.visible = true
      video.play()
    }
    else if (detail.name === 'toystory_up') {
      model2.position.copy(detail.position)
      model2.quaternion.copy(detail.rotation)
      model2.scale.set(detail.scale, detail.scale, detail.scale)
      model2.visible = true
    }
    else {
      model.position.copy(detail.position)
      model.quaternion.copy(detail.rotation)
      model.scale.set(detail.scale * 0.5, detail.scale  * 0.5, detail.scale * 0.5)
      model.visible = true
    }
  }

  // Hides the image frame when the target is no longer detected.
  const hideTarget = ({detail}) => {
     if (detail.name === 'video-target') {
      video.pause()
      videoObj.visible = false
    }
    else {
      model.visible = false
      model2.visible = false
    }

  }

  // Grab a handle to the threejs scene and set the camera position on pipeline startup.
  const onStart = ({canvas}) => {
    const {scene, camera} = XR8.Threejs.xrScene()  // Get the 3js scene from XR

    initXrScene({scene, camera}) // Add content to the scene and set starting camera position.
    
    // prevent scroll/pinch gestures on canvas
    canvas.addEventListener('touchmove', function (event) { event.preventDefault() }) 

    // Sync the xr controller's 6DoF position and camera paremeters with our scene.
    XR8.XrController.updateCameraProjectionMatrix({
      origin: camera.position,
      facing: camera.quaternion,
    })
  }

  return {
    // Camera pipeline modules need a name. It can be whatever you want but must be
    // unique within your app.
    name: 'threejs-flyer',

    // onStart is called once when the camera feed begins. In this case, we need to wait for the
    // XR8.Threejs scene to be ready before we can access it to add content. It was created in
    // XR8.Threejs.pipelineModule()'s onStart method.
    onStart,

    // Listeners are called right after the processing stage that fired them. This guarantees that
    // updates can be applied at an appropriate synchronized point in the rendering cycle.
    listeners: [
      {event: 'reality.imagefound', process: showTarget},
      {event: 'reality.imageupdated', process: showTarget},
      {event: 'reality.imagelost', process: hideTarget},
    ],
  }
}

export {imageTargetPipelineModule}
